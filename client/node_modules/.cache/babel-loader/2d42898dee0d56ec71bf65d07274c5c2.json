{"ast":null,"code":"import _slicedToArray from\"/Users/tbyers/fun/devupdatesimple/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useEffect}from'react';import{getStories}from'../utils/apis.js';var useDataFetcher=function useDataFetcher(type){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),stories=_useState2[0],setStories=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isLoading=_useState4[0],setIsLoading=_useState4[1];useEffect(function(){setIsLoading(true);getStories(type).then(function(stories){setStories(stories);setIsLoading(false);}).catch(function(){setIsLoading(false);});},[type]);return{isLoading:isLoading,stories:stories};};export default useDataFetcher;","map":{"version":3,"sources":["/Users/tbyers/fun/devupdatesimple/client/src/hooks/dataFetcher.js"],"names":["useState","useEffect","getStories","useDataFetcher","type","stories","setStories","isLoading","setIsLoading","then","catch"],"mappings":"8HAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,OAASC,UAAT,KAA2B,kBAA3B,CAEA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,IAAD,CAAU,CAC/B,cAA8BJ,QAAQ,CAAC,EAAD,CAAtC,wCAAOK,OAAP,eAAgBC,UAAhB,eACA,eAAkCN,QAAQ,CAAC,KAAD,CAA1C,yCAAOO,SAAP,eAAkBC,YAAlB,eAEAP,SAAS,CAAC,UAAM,CACdO,YAAY,CAAC,IAAD,CAAZ,CACAN,UAAU,CAACE,IAAD,CAAV,CACGK,IADH,CACQ,SAACJ,OAAD,CAAa,CACjBC,UAAU,CAACD,OAAD,CAAV,CACAG,YAAY,CAAC,KAAD,CAAZ,CACD,CAJH,EAKGE,KALH,CAKS,UAAM,CACXF,YAAY,CAAC,KAAD,CAAZ,CACD,CAPH,EAQD,CAVQ,CAUN,CAACJ,IAAD,CAVM,CAAT,CAYA,MAAO,CAAEG,SAAS,CAATA,SAAF,CAAaF,OAAO,CAAPA,OAAb,CAAP,CACD,CAjBD,CAmBA,cAAeF,CAAAA,cAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport { getStories } from '../utils/apis.js';\n\nconst useDataFetcher = (type) => {\n  const [stories, setStories] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getStories(type)\n      .then((stories) => {\n        setStories(stories);\n        setIsLoading(false);\n      })\n      .catch(() => {\n        setIsLoading(false);\n      });\n  }, [type]);\n\n  return { isLoading, stories };\n};\n\nexport default useDataFetcher;\n"]},"metadata":{},"sourceType":"module"}