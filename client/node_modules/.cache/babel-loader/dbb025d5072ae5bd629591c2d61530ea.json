{"ast":null,"code":"const he = require('he');\n\nconst {\n  get,\n  numberToLetterSequence,\n  numberToRoman,\n  splitClassesAndIds,\n  trimCharacter\n} = require('./helper'); // eslint-disable-next-line import/no-unassigned-import\n\n\nrequire('./typedefs');\n/**\n * Dummy formatter that discards the input and does nothing.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatSkip(elem, walk, builder, formatOptions) {\n  /* do nothing */\n}\n/**\n * Process an inline-level element.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatInline(elem, walk, builder, formatOptions) {\n  walk(elem.children, builder);\n}\n/**\n * Process a block-level container.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatBlock(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks\n  });\n  walk(elem.children, builder);\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks\n  });\n}\n/**\n * Process a line-break.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatLineBreak(elem, walk, builder, formatOptions) {\n  builder.addLineBreak();\n}\n/**\n * Process a `wbk` tag (word break opportunity).\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatWbr(elem, walk, builder, formatOptions) {\n  builder.addWordBreakOpportunity();\n}\n/**\n * Process a horizontal line.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatHorizontalLine(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n  });\n  builder.addInline('-'.repeat(formatOptions.length || builder.options.wordwrap || 40));\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n  });\n}\n/**\n * Process a paragraph.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatParagraph(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n  });\n  walk(elem.children, builder);\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n  });\n}\n/**\n * Process a preformatted content.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatPre(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    isPre: true,\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n  });\n  walk(elem.children, builder);\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n  });\n}\n/**\n * Process a heading.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatHeading(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n  });\n\n  if (formatOptions.uppercase !== false) {\n    builder.pushWordTransform(str => str.toUpperCase());\n    walk(elem.children, builder);\n    builder.popWordTransform();\n  } else {\n    walk(elem.children, builder);\n  }\n\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n  });\n}\n/**\n * Process a blockquote.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatBlockquote(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2,\n    reservedLineLength: 2\n  });\n  walk(elem.children, builder);\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2,\n    blockTransform: str => (formatOptions.trimEmptyLines !== false ? trimCharacter(str, '\\n') : str).split('\\n').map(line => '> ' + line).join('\\n')\n  });\n}\n\nfunction withBrackets(str, brackets) {\n  if (!brackets) {\n    return str;\n  }\n\n  const lbr = typeof brackets[0] === 'string' ? brackets[0] : '[';\n  const rbr = typeof brackets[1] === 'string' ? brackets[1] : ']';\n  return lbr + str + rbr;\n}\n/**\n * Process an image.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatImage(elem, walk, builder, formatOptions) {\n  const attribs = elem.attribs || {};\n  const alt = attribs.alt ? he.decode(attribs.alt, builder.options.decodeOptions) : '';\n  const src = !attribs.src ? '' : formatOptions.baseUrl && attribs.src.indexOf('/') === 0 ? formatOptions.baseUrl + attribs.src : attribs.src;\n  const text = !src ? alt : !alt ? withBrackets(src, formatOptions.linkBrackets) : alt + ' ' + withBrackets(src, formatOptions.linkBrackets);\n  builder.addInline(text);\n}\n/**\n * Process an anchor.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatAnchor(elem, walk, builder, formatOptions) {\n  function getHref() {\n    if (formatOptions.ignoreHref) {\n      return '';\n    }\n\n    if (!elem.attribs || !elem.attribs.href) {\n      return '';\n    }\n\n    let href = elem.attribs.href.replace(/^mailto:/, '');\n\n    if (formatOptions.noAnchorUrl && href[0] === '#') {\n      return '';\n    }\n\n    href = formatOptions.baseUrl && href[0] === '/' ? formatOptions.baseUrl + href : href;\n    return he.decode(href, builder.options.decodeOptions);\n  }\n\n  const href = getHref();\n\n  if (!href) {\n    walk(elem.children, builder);\n  } else {\n    let text = '';\n    builder.pushWordTransform(str => {\n      if (str) {\n        text += str;\n      }\n\n      return str;\n    });\n    walk(elem.children, builder);\n    builder.popWordTransform();\n    const hideSameLink = formatOptions.hideLinkHrefIfSameAsText && href === text;\n\n    if (!hideSameLink) {\n      builder.addInline(!text ? href : ' ' + withBrackets(href, formatOptions.linkBrackets), {\n        noWordTransform: true\n      });\n    }\n  }\n}\n/**\n * @param { DomNode }           elem               List items with their prefixes.\n * @param { RecursiveCallback } walk               Recursive callback to process child nodes.\n * @param { BlockTextBuilder }  builder            Passed around to accumulate output text.\n * @param { FormatOptions }     formatOptions      Options specific to a formatter.\n * @param { () => string }      nextPrefixCallback Function that returns increasing index each time it is called.\n */\n\n\nfunction formatList(elem, walk, builder, formatOptions, nextPrefixCallback) {\n  const isNestedList = get(elem, ['parent', 'name']) === 'li'; // With Roman numbers, index length is not as straightforward as with Arabic numbers or letters,\n  // so the dumb length comparison is the most robust way to get the correct value.\n\n  let maxPrefixLength = 0;\n  const listItems = (elem.children || [] // it might be more accurate to check only for html spaces here, but no significant benefit\n  ).filter(child => child.type !== 'text' || !/^\\s*$/.test(child.data)).map(function (child) {\n    if (child.name !== 'li') {\n      return {\n        node: child,\n        prefix: ''\n      };\n    }\n\n    const prefix = isNestedList ? nextPrefixCallback().trimStart() : nextPrefixCallback();\n\n    if (prefix.length > maxPrefixLength) {\n      maxPrefixLength = prefix.length;\n    }\n\n    return {\n      node: child,\n      prefix: prefix\n    };\n  });\n\n  if (!listItems.length) {\n    return;\n  }\n\n  const reservedLineLength = maxPrefixLength;\n  const spacing = '\\n' + ' '.repeat(reservedLineLength);\n  builder.openBlock({\n    leadingLineBreaks: isNestedList ? 1 : formatOptions.leadingLineBreaks || 2\n  });\n\n  for (const {\n    node,\n    prefix\n  } of listItems) {\n    builder.openBlock({\n      leadingLineBreaks: 1,\n      reservedLineLength: reservedLineLength\n    });\n    walk([node], builder);\n    builder.closeBlock({\n      trailingLineBreaks: 1,\n      blockTransform: str => prefix + ' '.repeat(reservedLineLength - prefix.length) + str.replace(/\\n/g, spacing)\n    });\n  }\n\n  builder.closeBlock({\n    trailingLineBreaks: isNestedList ? 1 : formatOptions.trailingLineBreaks || 2\n  });\n}\n/**\n * Process an unordered list.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatUnorderedList(elem, walk, builder, formatOptions) {\n  const prefix = formatOptions.itemPrefix || ' * ';\n  return formatList(elem, walk, builder, formatOptions, () => prefix);\n}\n/**\n * Process an ordered list.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatOrderedList(elem, walk, builder, formatOptions) {\n  let nextIndex = Number(elem.attribs.start || '1');\n  const indexFunction = getOrderedListIndexFunction(elem.attribs.type);\n\n  const nextPrefixCallback = () => ' ' + indexFunction(nextIndex++) + '. ';\n\n  return formatList(elem, walk, builder, formatOptions, nextPrefixCallback);\n}\n/**\n * Return a function that can be used to generate index markers of a specified format.\n *\n * @param   { string } [olType='1'] Marker type.\n * @returns { (i: number) => string }\n */\n\n\nfunction getOrderedListIndexFunction() {\n  let olType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '1';\n\n  switch (olType) {\n    case 'a':\n      return i => numberToLetterSequence(i, 'a');\n\n    case 'A':\n      return i => numberToLetterSequence(i, 'A');\n\n    case 'i':\n      return i => numberToRoman(i).toLowerCase();\n\n    case 'I':\n      return i => numberToRoman(i);\n\n    case '1':\n    default:\n      return i => i.toString();\n  }\n}\n\nfunction isDataTable(attr, tables) {\n  if (tables === true) {\n    return true;\n  }\n\n  if (!attr) {\n    return false;\n  }\n\n  const {\n    classes,\n    ids\n  } = splitClassesAndIds(tables);\n  const attrClasses = (attr['class'] || '').split(' ');\n  const attrIds = (attr['id'] || '').split(' ');\n  return attrClasses.some(x => classes.includes(x)) || attrIds.some(x => ids.includes(x));\n}\n/**\n * Process a table (either as a container or as a data table, depending on options).\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatTable(elem, walk, builder, formatOptions) {\n  return isDataTable(elem.attribs, builder.options.tables) ? formatDataTable(elem, walk, builder, formatOptions) : formatBlock(elem, walk, builder, formatOptions);\n}\n/**\n * Process a data table.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatDataTable(elem, walk, builder, formatOptions) {\n  builder.openTable();\n  elem.children.forEach(walkTable);\n  builder.closeTable({\n    colSpacing: formatOptions.colSpacing,\n    leadingLineBreaks: formatOptions.leadingLineBreaks,\n    rowSpacing: formatOptions.rowSpacing,\n    trailingLineBreaks: formatOptions.trailingLineBreaks\n  });\n\n  function formatCell(cellNode) {\n    const colspan = +get(cellNode, ['attribs', 'colspan']) || 1;\n    const rowspan = +get(cellNode, ['attribs', 'rowspan']) || 1;\n    builder.openTableCell({\n      maxColumnWidth: formatOptions.maxColumnWidth\n    });\n    walk(cellNode.children, builder);\n    builder.closeTableCell({\n      colspan: colspan,\n      rowspan: rowspan\n    });\n  }\n\n  function walkTable(elem) {\n    if (elem.type !== 'tag') {\n      return;\n    }\n\n    const formatHeaderCell = formatOptions.uppercaseHeaderCells !== false ? cellNode => {\n      builder.pushWordTransform(str => str.toUpperCase());\n      formatCell(cellNode);\n      builder.popWordTransform();\n    } : formatCell;\n\n    switch (elem.name) {\n      case 'thead':\n      case 'tbody':\n      case 'tfoot':\n      case 'center':\n        elem.children.forEach(walkTable);\n        return;\n\n      case 'tr':\n        {\n          builder.openTableRow();\n\n          for (const childOfTr of elem.children) {\n            if (childOfTr.type !== 'tag') {\n              continue;\n            }\n\n            switch (childOfTr.name) {\n              case 'th':\n                {\n                  formatHeaderCell(childOfTr);\n                  break;\n                }\n\n              case 'td':\n                {\n                  formatCell(childOfTr);\n                  break;\n                }\n\n              default: // do nothing\n\n            }\n          }\n\n          builder.closeTableRow();\n          break;\n        }\n\n      default: // do nothing\n\n    }\n  }\n}\n\nmodule.exports = {\n  anchor: formatAnchor,\n  block: formatBlock,\n  blockquote: formatBlockquote,\n  dataTable: formatDataTable,\n  heading: formatHeading,\n  horizontalLine: formatHorizontalLine,\n  image: formatImage,\n  inline: formatInline,\n  lineBreak: formatLineBreak,\n  orderedList: formatOrderedList,\n  paragraph: formatParagraph,\n  pre: formatPre,\n  skip: formatSkip,\n  table: formatTable,\n  unorderedList: formatUnorderedList,\n  wbr: formatWbr\n};","map":{"version":3,"sources":["/Users/tbyers/fun/devupdatesimple/client/node_modules/html-to-text/lib/formatter.js"],"names":["he","require","get","numberToLetterSequence","numberToRoman","splitClassesAndIds","trimCharacter","formatSkip","elem","walk","builder","formatOptions","formatInline","children","formatBlock","openBlock","leadingLineBreaks","closeBlock","trailingLineBreaks","formatLineBreak","addLineBreak","formatWbr","addWordBreakOpportunity","formatHorizontalLine","addInline","repeat","length","options","wordwrap","formatParagraph","formatPre","isPre","formatHeading","uppercase","pushWordTransform","str","toUpperCase","popWordTransform","formatBlockquote","reservedLineLength","blockTransform","trimEmptyLines","split","map","line","join","withBrackets","brackets","lbr","rbr","formatImage","attribs","alt","decode","decodeOptions","src","baseUrl","indexOf","text","linkBrackets","formatAnchor","getHref","ignoreHref","href","replace","noAnchorUrl","hideSameLink","hideLinkHrefIfSameAsText","noWordTransform","formatList","nextPrefixCallback","isNestedList","maxPrefixLength","listItems","filter","child","type","test","data","name","node","prefix","trimStart","spacing","formatUnorderedList","itemPrefix","formatOrderedList","nextIndex","Number","start","indexFunction","getOrderedListIndexFunction","olType","i","toLowerCase","toString","isDataTable","attr","tables","classes","ids","attrClasses","attrIds","some","x","includes","formatTable","formatDataTable","openTable","forEach","walkTable","closeTable","colSpacing","rowSpacing","formatCell","cellNode","colspan","rowspan","openTableCell","maxColumnWidth","closeTableCell","formatHeaderCell","uppercaseHeaderCells","openTableRow","childOfTr","closeTableRow","module","exports","anchor","block","blockquote","dataTable","heading","horizontalLine","image","inline","lineBreak","orderedList","paragraph","pre","skip","table","unorderedList","wbr"],"mappings":"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","sourcesContent":["const he = require('he');\n\nconst { get, numberToLetterSequence, numberToRoman, splitClassesAndIds, trimCharacter } = require('./helper');\n\n// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n\n\n/**\n * Dummy formatter that discards the input and does nothing.\n *\n * @type { FormatCallback }\n */\nfunction formatSkip (elem, walk, builder, formatOptions) {\n  /* do nothing */\n}\n\n/**\n * Process an inline-level element.\n *\n * @type { FormatCallback }\n */\nfunction formatInline (elem, walk, builder, formatOptions) {\n  walk(elem.children, builder);\n}\n\n/**\n * Process a block-level container.\n *\n * @type { FormatCallback }\n */\nfunction formatBlock (elem, walk, builder, formatOptions) {\n  builder.openBlock({ leadingLineBreaks: formatOptions.leadingLineBreaks });\n  walk(elem.children, builder);\n  builder.closeBlock({ trailingLineBreaks: formatOptions.trailingLineBreaks });\n}\n\n/**\n * Process a line-break.\n *\n * @type { FormatCallback }\n */\nfunction formatLineBreak (elem, walk, builder, formatOptions) {\n  builder.addLineBreak();\n}\n\n/**\n * Process a `wbk` tag (word break opportunity).\n *\n * @type { FormatCallback }\n */\nfunction formatWbr (elem, walk, builder, formatOptions) {\n  builder.addWordBreakOpportunity();\n}\n\n/**\n * Process a horizontal line.\n *\n * @type { FormatCallback }\n */\nfunction formatHorizontalLine (elem, walk, builder, formatOptions) {\n  builder.openBlock({ leadingLineBreaks: formatOptions.leadingLineBreaks || 2 });\n  builder.addInline('-'.repeat(formatOptions.length || builder.options.wordwrap || 40));\n  builder.closeBlock({ trailingLineBreaks: formatOptions.trailingLineBreaks || 2 });\n}\n\n/**\n * Process a paragraph.\n *\n * @type { FormatCallback }\n */\nfunction formatParagraph (elem, walk, builder, formatOptions) {\n  builder.openBlock({ leadingLineBreaks: formatOptions.leadingLineBreaks || 2 });\n  walk(elem.children, builder);\n  builder.closeBlock({ trailingLineBreaks: formatOptions.trailingLineBreaks || 2 });\n}\n\n/**\n * Process a preformatted content.\n *\n * @type { FormatCallback }\n */\nfunction formatPre (elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    isPre: true,\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n  });\n  walk(elem.children, builder);\n  builder.closeBlock({ trailingLineBreaks: formatOptions.trailingLineBreaks || 2 });\n}\n\n/**\n * Process a heading.\n *\n * @type { FormatCallback }\n */\nfunction formatHeading (elem, walk, builder, formatOptions) {\n  builder.openBlock({ leadingLineBreaks: formatOptions.leadingLineBreaks || 2 });\n  if (formatOptions.uppercase !== false) {\n    builder.pushWordTransform(str => str.toUpperCase());\n    walk(elem.children, builder);\n    builder.popWordTransform();\n  } else {\n    walk(elem.children, builder);\n  }\n  builder.closeBlock({ trailingLineBreaks: formatOptions.trailingLineBreaks || 2 });\n}\n\n/**\n * Process a blockquote.\n *\n * @type { FormatCallback }\n */\nfunction formatBlockquote (elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2,\n    reservedLineLength: 2\n  });\n  walk(elem.children, builder);\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2,\n    blockTransform: str => ((formatOptions.trimEmptyLines !== false) ? trimCharacter(str, '\\n') : str)\n      .split('\\n')\n      .map(line => '> ' + line)\n      .join('\\n')\n  });\n}\n\nfunction withBrackets (str, brackets) {\n  if (!brackets) { return str; }\n\n  const lbr = (typeof brackets[0] === 'string')\n    ? brackets[0]\n    : '[';\n  const rbr = (typeof brackets[1] === 'string')\n    ? brackets[1]\n    : ']';\n  return lbr + str + rbr;\n}\n\n/**\n * Process an image.\n *\n * @type { FormatCallback }\n */\nfunction formatImage (elem, walk, builder, formatOptions) {\n  const attribs = elem.attribs || {};\n  const alt = (attribs.alt)\n    ? he.decode(attribs.alt, builder.options.decodeOptions)\n    : '';\n  const src = (!attribs.src)\n    ? ''\n    : (formatOptions.baseUrl && attribs.src.indexOf('/') === 0)\n      ? formatOptions.baseUrl + attribs.src\n      : attribs.src;\n  const text = (!src)\n    ? alt\n    : (!alt)\n      ? withBrackets(src, formatOptions.linkBrackets)\n      : alt + ' ' + withBrackets(src, formatOptions.linkBrackets);\n\n  builder.addInline(text);\n}\n\n/**\n * Process an anchor.\n *\n * @type { FormatCallback }\n */\nfunction formatAnchor (elem, walk, builder, formatOptions) {\n  function getHref () {\n    if (formatOptions.ignoreHref) { return ''; }\n    if (!elem.attribs || !elem.attribs.href) { return ''; }\n    let href = elem.attribs.href.replace(/^mailto:/, '');\n    if (formatOptions.noAnchorUrl && href[0] === '#') { return ''; }\n    href = (formatOptions.baseUrl && href[0] === '/')\n      ? formatOptions.baseUrl + href\n      : href;\n    return he.decode(href, builder.options.decodeOptions);\n  }\n  const href = getHref();\n  if (!href) {\n    walk(elem.children, builder);\n  } else {\n    let text = '';\n    builder.pushWordTransform(\n      str => {\n        if (str) { text += str; }\n        return str;\n      }\n    );\n    walk(elem.children, builder);\n    builder.popWordTransform();\n\n    const hideSameLink = formatOptions.hideLinkHrefIfSameAsText && href === text;\n    if (!hideSameLink) {\n      builder.addInline(\n        (!text)\n          ? href\n          : ' ' + withBrackets(href, formatOptions.linkBrackets),\n        { noWordTransform: true }\n      );\n    }\n  }\n}\n\n/**\n * @param { DomNode }           elem               List items with their prefixes.\n * @param { RecursiveCallback } walk               Recursive callback to process child nodes.\n * @param { BlockTextBuilder }  builder            Passed around to accumulate output text.\n * @param { FormatOptions }     formatOptions      Options specific to a formatter.\n * @param { () => string }      nextPrefixCallback Function that returns increasing index each time it is called.\n */\nfunction formatList (elem, walk, builder, formatOptions, nextPrefixCallback) {\n  const isNestedList = get(elem, ['parent', 'name']) === 'li';\n\n  // With Roman numbers, index length is not as straightforward as with Arabic numbers or letters,\n  // so the dumb length comparison is the most robust way to get the correct value.\n  let maxPrefixLength = 0;\n  const listItems = (elem.children || [])\n    // it might be more accurate to check only for html spaces here, but no significant benefit\n    .filter(child => child.type !== 'text' || !/^\\s*$/.test(child.data))\n    .map(function (child) {\n      if (child.name !== 'li') {\n        return { node: child, prefix: '' };\n      }\n      const prefix = (isNestedList)\n        ? nextPrefixCallback().trimStart()\n        : nextPrefixCallback();\n      if (prefix.length > maxPrefixLength) { maxPrefixLength = prefix.length; }\n      return { node: child, prefix: prefix };\n    });\n  if (!listItems.length) { return; }\n\n  const reservedLineLength = maxPrefixLength;\n  const spacing = '\\n' + ' '.repeat(reservedLineLength);\n  builder.openBlock({ leadingLineBreaks: isNestedList ? 1 : (formatOptions.leadingLineBreaks || 2) });\n  for (const { node, prefix } of listItems) {\n    builder.openBlock({\n      leadingLineBreaks: 1,\n      reservedLineLength: reservedLineLength\n    });\n    walk([node], builder);\n    builder.closeBlock({\n      trailingLineBreaks: 1,\n      blockTransform: str => prefix + ' '.repeat(reservedLineLength - prefix.length) + str.replace(/\\n/g, spacing)\n    });\n  }\n  builder.closeBlock({ trailingLineBreaks: isNestedList ? 1 : (formatOptions.trailingLineBreaks || 2) });\n}\n\n/**\n * Process an unordered list.\n *\n * @type { FormatCallback }\n */\nfunction formatUnorderedList (elem, walk, builder, formatOptions) {\n  const prefix = formatOptions.itemPrefix || ' * ';\n  return formatList(elem, walk, builder, formatOptions, () => prefix);\n}\n\n/**\n * Process an ordered list.\n *\n * @type { FormatCallback }\n */\nfunction formatOrderedList (elem, walk, builder, formatOptions) {\n  let nextIndex = Number(elem.attribs.start || '1');\n  const indexFunction = getOrderedListIndexFunction(elem.attribs.type);\n  const nextPrefixCallback = () => ' ' + indexFunction(nextIndex++) + '. ';\n  return formatList(elem, walk, builder, formatOptions, nextPrefixCallback);\n}\n\n/**\n * Return a function that can be used to generate index markers of a specified format.\n *\n * @param   { string } [olType='1'] Marker type.\n * @returns { (i: number) => string }\n */\nfunction getOrderedListIndexFunction (olType = '1') {\n  switch (olType) {\n    case 'a': return (i) => numberToLetterSequence(i, 'a');\n    case 'A': return (i) => numberToLetterSequence(i, 'A');\n    case 'i': return (i) => numberToRoman(i).toLowerCase();\n    case 'I': return (i) => numberToRoman(i);\n    case '1':\n    default: return (i) => (i).toString();\n  }\n}\n\nfunction isDataTable (attr, tables) {\n  if (tables === true) { return true; }\n  if (!attr) { return false; }\n\n  const { classes, ids } = splitClassesAndIds(tables);\n  const attrClasses = (attr['class'] || '').split(' ');\n  const attrIds = (attr['id'] || '').split(' ');\n\n  return attrClasses.some(x => classes.includes(x)) || attrIds.some(x => ids.includes(x));\n}\n\n/**\n * Process a table (either as a container or as a data table, depending on options).\n *\n * @type { FormatCallback }\n */\nfunction formatTable (elem, walk, builder, formatOptions) {\n  return isDataTable(elem.attribs, builder.options.tables)\n    ? formatDataTable(elem, walk, builder, formatOptions)\n    : formatBlock(elem, walk, builder, formatOptions);\n}\n\n/**\n * Process a data table.\n *\n * @type { FormatCallback }\n */\nfunction formatDataTable (elem, walk, builder, formatOptions) {\n  builder.openTable();\n  elem.children.forEach(walkTable);\n  builder.closeTable({\n    colSpacing: formatOptions.colSpacing,\n    leadingLineBreaks: formatOptions.leadingLineBreaks,\n    rowSpacing: formatOptions.rowSpacing,\n    trailingLineBreaks: formatOptions.trailingLineBreaks\n  });\n\n  function formatCell (cellNode) {\n    const colspan = +get(cellNode, ['attribs', 'colspan']) || 1;\n    const rowspan = +get(cellNode, ['attribs', 'rowspan']) || 1;\n    builder.openTableCell({ maxColumnWidth: formatOptions.maxColumnWidth });\n    walk(cellNode.children, builder);\n    builder.closeTableCell({ colspan: colspan, rowspan: rowspan });\n  }\n\n  function walkTable (elem) {\n    if (elem.type !== 'tag') { return; }\n\n    const formatHeaderCell = (formatOptions.uppercaseHeaderCells !== false)\n      ? (cellNode) => {\n        builder.pushWordTransform(str => str.toUpperCase());\n        formatCell(cellNode);\n        builder.popWordTransform();\n      }\n      : formatCell;\n\n    switch (elem.name) {\n      case 'thead':\n      case 'tbody':\n      case 'tfoot':\n      case 'center':\n        elem.children.forEach(walkTable);\n        return;\n\n      case 'tr': {\n        builder.openTableRow();\n        for (const childOfTr of elem.children) {\n          if (childOfTr.type !== 'tag') { continue; }\n          switch (childOfTr.name) {\n            case 'th': {\n              formatHeaderCell(childOfTr);\n              break;\n            }\n            case 'td': {\n              formatCell(childOfTr);\n              break;\n            }\n            default:\n              // do nothing\n          }\n        }\n        builder.closeTableRow();\n        break;\n      }\n\n      default:\n        // do nothing\n    }\n  }\n}\n\nmodule.exports = {\n  anchor: formatAnchor,\n  block: formatBlock,\n  blockquote: formatBlockquote,\n  dataTable: formatDataTable,\n  heading: formatHeading,\n  horizontalLine: formatHorizontalLine,\n  image: formatImage,\n  inline: formatInline,\n  lineBreak: formatLineBreak,\n  orderedList: formatOrderedList,\n  paragraph: formatParagraph,\n  pre: formatPre,\n  skip: formatSkip,\n  table: formatTable,\n  unorderedList: formatUnorderedList,\n  wbr: formatWbr\n};\n"]},"metadata":{},"sourceType":"script"}