{"ast":null,"code":"const {\n  hp2Builder\n} = require('@selderee/plugin-htmlparser2');\n\nconst merge = require('deepmerge');\n\nconst he = require('he');\n\nconst htmlparser = require('htmlparser2');\n\nconst selderee = require('selderee');\n\nconst {\n  BlockTextBuilder\n} = require('./block-text-builder');\n\nconst defaultFormatters = require('./formatter');\n\nconst {\n  limitedDepthRecursive,\n  mergeDuplicatesPreferLast,\n  get\n} = require('./helper'); // eslint-disable-next-line import/no-unassigned-import\n\n\nrequire('./typedefs');\n/**\n * Default options.\n *\n * @constant\n * @type { Options }\n * @default\n * @private\n */\n\n\nconst DEFAULT_OPTIONS = {\n  baseElements: {\n    selectors: ['body'],\n    orderBy: 'selectors',\n    // 'selectors' | 'occurrence'\n    returnDomByDefault: true\n  },\n  decodeOptions: {\n    isAttributeValue: false,\n    strict: false\n  },\n  formatters: {},\n  limits: {\n    ellipsis: '...',\n    maxBaseElements: undefined,\n    maxChildNodes: undefined,\n    maxDepth: undefined,\n    maxInputLength: 1 << 24 // 16_777_216\n\n  },\n  longWordSplit: {\n    forceWrapOnLimit: false,\n    wrapCharacters: []\n  },\n  preserveNewlines: false,\n  selectors: [{\n    selector: '*',\n    format: 'inline'\n  }, {\n    selector: 'a',\n    format: 'anchor',\n    options: {\n      baseUrl: null,\n      hideLinkHrefIfSameAsText: false,\n      ignoreHref: false,\n      linkBrackets: ['[', ']'],\n      noAnchorUrl: true\n    }\n  }, {\n    selector: 'article',\n    format: 'block'\n  }, {\n    selector: 'aside',\n    format: 'block'\n  }, {\n    selector: 'blockquote',\n    format: 'blockquote',\n    options: {\n      leadingLineBreaks: 2,\n      trailingLineBreaks: 2,\n      trimEmptyLines: true\n    }\n  }, {\n    selector: 'br',\n    format: 'lineBreak'\n  }, {\n    selector: 'div',\n    format: 'block'\n  }, {\n    selector: 'footer',\n    format: 'block'\n  }, {\n    selector: 'form',\n    format: 'block'\n  }, {\n    selector: 'h1',\n    format: 'heading',\n    options: {\n      leadingLineBreaks: 3,\n      trailingLineBreaks: 2,\n      uppercase: true\n    }\n  }, {\n    selector: 'h2',\n    format: 'heading',\n    options: {\n      leadingLineBreaks: 3,\n      trailingLineBreaks: 2,\n      uppercase: true\n    }\n  }, {\n    selector: 'h3',\n    format: 'heading',\n    options: {\n      leadingLineBreaks: 3,\n      trailingLineBreaks: 2,\n      uppercase: true\n    }\n  }, {\n    selector: 'h4',\n    format: 'heading',\n    options: {\n      leadingLineBreaks: 2,\n      trailingLineBreaks: 2,\n      uppercase: true\n    }\n  }, {\n    selector: 'h5',\n    format: 'heading',\n    options: {\n      leadingLineBreaks: 2,\n      trailingLineBreaks: 2,\n      uppercase: true\n    }\n  }, {\n    selector: 'h6',\n    format: 'heading',\n    options: {\n      leadingLineBreaks: 2,\n      trailingLineBreaks: 2,\n      uppercase: true\n    }\n  }, {\n    selector: 'header',\n    format: 'block'\n  }, {\n    selector: 'hr',\n    format: 'horizontalLine',\n    options: {\n      leadingLineBreaks: 2,\n      length: undefined,\n      trailingLineBreaks: 2\n    }\n  }, {\n    selector: 'img',\n    format: 'image',\n    options: {\n      baseUrl: null,\n      linkBrackets: ['[', ']']\n    }\n  }, {\n    selector: 'main',\n    format: 'block'\n  }, {\n    selector: 'nav',\n    format: 'block'\n  }, {\n    selector: 'ol',\n    format: 'orderedList',\n    options: {\n      leadingLineBreaks: 2,\n      trailingLineBreaks: 2\n    }\n  }, {\n    selector: 'p',\n    format: 'paragraph',\n    options: {\n      leadingLineBreaks: 2,\n      trailingLineBreaks: 2\n    }\n  }, {\n    selector: 'pre',\n    format: 'pre',\n    options: {\n      leadingLineBreaks: 2,\n      trailingLineBreaks: 2\n    }\n  }, {\n    selector: 'section',\n    format: 'block'\n  }, {\n    selector: 'table',\n    format: 'table',\n    options: {\n      colSpacing: 3,\n      leadingLineBreaks: 2,\n      maxColumnWidth: 60,\n      rowSpacing: 0,\n      trailingLineBreaks: 2,\n      uppercaseHeaderCells: true\n    }\n  }, {\n    selector: 'ul',\n    format: 'unorderedList',\n    options: {\n      itemPrefix: ' * ',\n      leadingLineBreaks: 2,\n      trailingLineBreaks: 2\n    }\n  }, {\n    selector: 'wbr',\n    format: 'wbr'\n  }],\n  tables: [],\n  // deprecated\n  whitespaceCharacters: ' \\t\\r\\n\\f\\u200b',\n  wordwrap: 80\n};\n\nconst concatMerge = (acc, src, options) => [...acc, ...src];\n\nconst overwriteMerge = (acc, src, options) => [...src];\n\nconst selectorsMerge = (acc, src, options) => acc.some(s => typeof s === 'object') ? concatMerge(acc, src, options) // selectors\n: overwriteMerge(acc, src, options) // baseElements.selectors\n;\n/**\n * Preprocess options, compile selectors into a decision tree,\n * return a function intended for batch processing.\n *\n * @param   { Options } [options = {}]   HtmlToText options.\n * @returns { (html: string) => string } Pre-configured converter function.\n * @static\n */\n\n\nfunction compile() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  options = merge(DEFAULT_OPTIONS, options, {\n    arrayMerge: overwriteMerge,\n    customMerge: key => key === 'selectors' ? selectorsMerge : undefined\n  });\n  options.formatters = Object.assign({}, defaultFormatters, options.formatters);\n  handleDeprecatedOptions(options);\n  const uniqueSelectors = mergeDuplicatesPreferLast(options.selectors, s => s.selector);\n  const selectorsWithoutFormat = uniqueSelectors.filter(s => !s.format);\n\n  if (selectorsWithoutFormat.length) {\n    throw new Error('Following selectors have no specified format: ' + selectorsWithoutFormat.map(s => `\\`${s.selector}\\``).join(', '));\n  }\n\n  const picker = new selderee.DecisionTree(uniqueSelectors.map(s => [s.selector, s])).build(hp2Builder);\n  const baseSelectorsPicker = new selderee.DecisionTree(options.baseElements.selectors.map((s, i) => [s, i + 1])).build(hp2Builder);\n\n  function findBaseElements(dom) {\n    return findBases(dom, options, baseSelectorsPicker);\n  }\n\n  const limitedWalk = limitedDepthRecursive(options.limits.maxDepth, recursiveWalk, function (dom, builder) {\n    builder.addInline(options.limits.ellipsis || '');\n  });\n  return function (html) {\n    return process(html, options, picker, findBaseElements, limitedWalk);\n  };\n}\n/**\n * Convert given HTML according to preprocessed options.\n *\n * @param { string } html HTML content to convert.\n * @param { Options } options HtmlToText options (preprocessed).\n * @param { Picker<DomNode, TagDefinition> } picker\n * Tag definition picker for DOM nodes processing.\n * @param { (dom: DomNode[]) => DomNode[] } findBaseElements\n * Function to extract elements from HTML DOM\n * that will only be present in the output text.\n * @param { RecursiveCallback } walk Recursive callback.\n * @returns { string }\n */\n\n\nfunction process(html, options, picker, findBaseElements, walk) {\n  const maxInputLength = options.limits.maxInputLength;\n\n  if (maxInputLength && html && html.length > maxInputLength) {\n    console.warn(`Input length ${html.length} is above allowed limit of ${maxInputLength}. Truncating without ellipsis.`);\n    html = html.substring(0, maxInputLength);\n  }\n\n  const handler = new htmlparser.DomHandler();\n  new htmlparser.Parser(handler, {\n    decodeEntities: false\n  }).parseComplete(html);\n  const bases = findBaseElements(handler.dom);\n  const builder = new BlockTextBuilder(options, picker);\n  walk(bases, builder);\n  return builder.toString();\n}\n/**\n * Convert given HTML content to plain text string.\n *\n * @param   { string }  html           HTML content to convert.\n * @param   { Options } [options = {}] HtmlToText options.\n * @returns { string }                 Plain text string.\n * @static\n *\n * @example\n * const { convert } = require('html-to-text');\n * const text = convert('<h1>Hello World</h1>', {\n *   wordwrap: 130\n * });\n * console.log(text); // HELLO WORLD\n */\n\n\nfunction convert(html) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return compile(options)(html);\n}\n/**\n * Map previously existing and now deprecated options to the new options layout.\n * This is a subject for cleanup in major releases.\n *\n * @param { Options } options HtmlToText options.\n */\n\n\nfunction handleDeprecatedOptions(options) {\n  const selectorDefinitions = options.selectors;\n\n  if (options.tags) {\n    const tagDefinitions = Object.entries(options.tags).map(_ref => {\n      let [selector, definition] = _ref;\n      return { ...definition,\n        selector: selector || '*'\n      };\n    });\n    selectorDefinitions.push(...tagDefinitions);\n  }\n\n  function set(obj, path, value) {\n    const valueKey = path.pop();\n\n    for (const key of path) {\n      let nested = obj[key];\n\n      if (!nested) {\n        nested = {};\n        obj[key] = nested;\n      }\n\n      obj = nested;\n    }\n\n    obj[valueKey] = value;\n  }\n\n  function copyFormatterOption(source, format, target) {\n    if (options[source] === undefined) {\n      return;\n    }\n\n    for (const definition of selectorDefinitions) {\n      if (definition.format === format) {\n        set(definition, ['options', target], options[source]);\n      }\n    }\n  }\n\n  copyFormatterOption('hideLinkHrefIfSameAsText', 'anchor', 'hideLinkHrefIfSameAsText');\n  copyFormatterOption('ignoreHref', 'anchor', 'ignoreHref');\n  copyFormatterOption('linkHrefBaseUrl', 'anchor', 'baseUrl');\n  copyFormatterOption('noAnchorUrl', 'anchor', 'noAnchorUrl');\n  copyFormatterOption('noLinkBrackets', 'anchor', 'noLinkBrackets');\n  copyFormatterOption('linkHrefBaseUrl', 'image', 'baseUrl');\n  copyFormatterOption('unorderedListItemPrefix', 'unorderedList', 'itemPrefix');\n  copyFormatterOption('uppercaseHeadings', 'heading', 'uppercase');\n  copyFormatterOption('uppercaseHeadings', 'table', 'uppercaseHeadings');\n  copyFormatterOption('uppercaseHeadings', 'dataTable', 'uppercaseHeadings');\n\n  if (options['ignoreImage']) {\n    for (const definition of selectorDefinitions) {\n      if (definition.format === 'image') {\n        definition.format = 'skip';\n      }\n    }\n  }\n\n  if (options['singleNewLineParagraphs']) {\n    for (const definition of selectorDefinitions) {\n      if (definition.format === 'paragraph' || definition.format === 'pre') {\n        set(definition, ['options', 'leadingLineBreaks'], 1);\n        set(definition, ['options', 'trailingLineBreaks'], 1);\n      }\n    }\n  }\n\n  if (options['baseElement']) {\n    const baseElement = options['baseElement'];\n    set(options, ['baseElements', 'selectors'], Array.isArray(baseElement) ? baseElement : [baseElement]);\n  }\n\n  if (options['returnDomByDefault'] !== undefined) {\n    set(options, ['baseElements', 'returnDomByDefault'], options['returnDomByDefault']);\n  }\n\n  for (const definition of selectorDefinitions) {\n    if (definition.format === 'anchor' && get(definition, ['options', 'noLinkBrackets'])) {\n      set(definition, ['options', 'linkBrackets'], false);\n    }\n  }\n}\n\nfunction findBases(dom, options, baseSelectorsPicker) {\n  const results = [];\n\n  function recursiveWalk(walk,\n  /** @type { DomNode[] } */\n  dom) {\n    dom = dom.slice(0, options.limits.maxChildNodes);\n\n    for (const elem of dom) {\n      if (elem.type !== 'tag') {\n        continue;\n      }\n\n      const pickedSelectorIndex = baseSelectorsPicker.pick1(elem);\n\n      if (pickedSelectorIndex > 0) {\n        results.push({\n          selectorIndex: pickedSelectorIndex,\n          element: elem\n        });\n      } else if (elem.children) {\n        walk(elem.children);\n      }\n\n      if (results.length >= options.limits.maxBaseElements) {\n        return;\n      }\n    }\n  }\n\n  const limitedWalk = limitedDepthRecursive(options.limits.maxDepth, recursiveWalk);\n  limitedWalk(dom);\n\n  if (options.baseElements.orderBy !== 'occurrence') {\n    // 'selectors'\n    results.sort((a, b) => a.selectorIndex - b.selectorIndex);\n  }\n\n  return options.baseElements.returnDomByDefault && results.length === 0 ? dom : results.map(x => x.element);\n}\n/**\n * Function to walk through DOM nodes and accumulate their string representations.\n *\n * @param   { RecursiveCallback } walk    Recursive callback.\n * @param   { DomNode[] }         [dom]   Nodes array to process.\n * @param   { BlockTextBuilder }  builder Passed around to accumulate output text.\n * @private\n */\n\n\nfunction recursiveWalk(walk, dom, builder) {\n  if (!dom) {\n    return;\n  }\n\n  const options = builder.options;\n  const tooManyChildNodes = dom.length > options.limits.maxChildNodes;\n\n  if (tooManyChildNodes) {\n    dom = dom.slice(0, options.limits.maxChildNodes);\n    dom.push({\n      data: options.limits.ellipsis,\n      type: 'text'\n    });\n  }\n\n  for (const elem of dom) {\n    switch (elem.type) {\n      case 'text':\n        {\n          builder.addInline(he.decode(elem.data, options.decodeOptions));\n          break;\n        }\n\n      case 'tag':\n        {\n          const tagDefinition = builder.picker.pick1(elem);\n          const format = options.formatters[tagDefinition.format];\n          format(elem, walk, builder, tagDefinition.options || {});\n          break;\n        }\n\n      default:\n        /* do nothing */\n        break;\n    }\n  }\n\n  return;\n}\n/**\n * @deprecated Use `{ convert }` function instead!\n * @see convert\n *\n * @param   { string }  html           HTML content to convert.\n * @param   { Options } [options = {}] HtmlToText options.\n * @returns { string }                 Plain text string.\n * @static\n */\n\n\nconst fromString = function (html) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return convert(html, options);\n};\n\nmodule.exports = {\n  compile: compile,\n  convert: convert,\n  fromString: fromString,\n  htmlToText: convert\n};","map":{"version":3,"sources":["/Users/tbyers/fun/devupdatesimple/client/node_modules/html-to-text/lib/html-to-text.js"],"names":["hp2Builder","require","merge","he","htmlparser","selderee","BlockTextBuilder","defaultFormatters","limitedDepthRecursive","mergeDuplicatesPreferLast","get","DEFAULT_OPTIONS","baseElements","selectors","orderBy","returnDomByDefault","decodeOptions","isAttributeValue","strict","formatters","limits","ellipsis","maxBaseElements","undefined","maxChildNodes","maxDepth","maxInputLength","longWordSplit","forceWrapOnLimit","wrapCharacters","preserveNewlines","selector","format","options","baseUrl","hideLinkHrefIfSameAsText","ignoreHref","linkBrackets","noAnchorUrl","leadingLineBreaks","trailingLineBreaks","trimEmptyLines","uppercase","length","colSpacing","maxColumnWidth","rowSpacing","uppercaseHeaderCells","itemPrefix","tables","whitespaceCharacters","wordwrap","concatMerge","acc","src","overwriteMerge","selectorsMerge","some","s","compile","arrayMerge","customMerge","key","Object","assign","handleDeprecatedOptions","uniqueSelectors","selectorsWithoutFormat","filter","Error","map","join","picker","DecisionTree","build","baseSelectorsPicker","i","findBaseElements","dom","findBases","limitedWalk","recursiveWalk","builder","addInline","html","process","walk","console","warn","substring","handler","DomHandler","Parser","decodeEntities","parseComplete","bases","toString","convert","selectorDefinitions","tags","tagDefinitions","entries","definition","push","set","obj","path","value","valueKey","pop","nested","copyFormatterOption","source","target","baseElement","Array","isArray","results","slice","elem","type","pickedSelectorIndex","pick1","selectorIndex","element","children","sort","a","b","x","tooManyChildNodes","data","decode","tagDefinition","fromString","module","exports","htmlToText"],"mappings":"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","sourcesContent":["const { hp2Builder } = require('@selderee/plugin-htmlparser2');\nconst merge = require('deepmerge');\nconst he = require('he');\nconst htmlparser = require('htmlparser2');\nconst selderee = require('selderee');\n\nconst { BlockTextBuilder } = require('./block-text-builder');\nconst defaultFormatters = require('./formatter');\nconst { limitedDepthRecursive, mergeDuplicatesPreferLast, get } = require('./helper');\n\n// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n\n\n/**\n * Default options.\n *\n * @constant\n * @type { Options }\n * @default\n * @private\n */\nconst DEFAULT_OPTIONS = {\n  baseElements: {\n    selectors: [ 'body' ],\n    orderBy: 'selectors', // 'selectors' | 'occurrence'\n    returnDomByDefault: true\n  },\n  decodeOptions: {\n    isAttributeValue: false,\n    strict: false\n  },\n  formatters: {},\n  limits: {\n    ellipsis: '...',\n    maxBaseElements: undefined,\n    maxChildNodes: undefined,\n    maxDepth: undefined,\n    maxInputLength: (1 << 24) // 16_777_216\n  },\n  longWordSplit: {\n    forceWrapOnLimit: false,\n    wrapCharacters: []\n  },\n  preserveNewlines: false,\n  selectors: [\n    { selector: '*', format: 'inline' },\n    {\n      selector: 'a',\n      format: 'anchor',\n      options: {\n        baseUrl: null,\n        hideLinkHrefIfSameAsText: false,\n        ignoreHref: false,\n        linkBrackets: ['[', ']'],\n        noAnchorUrl: true\n      }\n    },\n    { selector: 'article', format: 'block' },\n    { selector: 'aside', format: 'block' },\n    {\n      selector: 'blockquote',\n      format: 'blockquote',\n      options: { leadingLineBreaks: 2, trailingLineBreaks: 2, trimEmptyLines: true }\n    },\n    { selector: 'br', format: 'lineBreak' },\n    { selector: 'div', format: 'block' },\n    { selector: 'footer', format: 'block' },\n    { selector: 'form', format: 'block' },\n    { selector: 'h1', format: 'heading', options: { leadingLineBreaks: 3, trailingLineBreaks: 2, uppercase: true } },\n    { selector: 'h2', format: 'heading', options: { leadingLineBreaks: 3, trailingLineBreaks: 2, uppercase: true } },\n    { selector: 'h3', format: 'heading', options: { leadingLineBreaks: 3, trailingLineBreaks: 2, uppercase: true } },\n    { selector: 'h4', format: 'heading', options: { leadingLineBreaks: 2, trailingLineBreaks: 2, uppercase: true } },\n    { selector: 'h5', format: 'heading', options: { leadingLineBreaks: 2, trailingLineBreaks: 2, uppercase: true } },\n    { selector: 'h6', format: 'heading', options: { leadingLineBreaks: 2, trailingLineBreaks: 2, uppercase: true } },\n    { selector: 'header', format: 'block' },\n    {\n      selector: 'hr',\n      format: 'horizontalLine',\n      options: { leadingLineBreaks: 2, length: undefined, trailingLineBreaks: 2 }\n    },\n    {\n      selector: 'img',\n      format: 'image',\n      options: { baseUrl: null, linkBrackets: ['[', ']'] }\n    },\n    { selector: 'main', format: 'block' },\n    { selector: 'nav', format: 'block' },\n    {\n      selector: 'ol',\n      format: 'orderedList',\n      options: { leadingLineBreaks: 2, trailingLineBreaks: 2 }\n    },\n    { selector: 'p', format: 'paragraph', options: { leadingLineBreaks: 2, trailingLineBreaks: 2 } },\n    { selector: 'pre', format: 'pre', options: { leadingLineBreaks: 2, trailingLineBreaks: 2 } },\n    { selector: 'section', format: 'block' },\n    {\n      selector: 'table',\n      format: 'table',\n      options: {\n        colSpacing: 3,\n        leadingLineBreaks: 2,\n        maxColumnWidth: 60,\n        rowSpacing: 0,\n        trailingLineBreaks: 2,\n        uppercaseHeaderCells: true\n      }\n    },\n    {\n      selector: 'ul',\n      format: 'unorderedList',\n      options: { itemPrefix: ' * ', leadingLineBreaks: 2, trailingLineBreaks: 2 }\n    },\n    { selector: 'wbr', format: 'wbr' },\n  ],\n  tables: [], // deprecated\n  whitespaceCharacters: ' \\t\\r\\n\\f\\u200b',\n  wordwrap: 80\n};\n\nconst concatMerge = (acc, src, options) => [...acc, ...src];\nconst overwriteMerge = (acc, src, options) => [...src];\nconst selectorsMerge = (acc, src, options) => (\n  (acc.some(s => typeof s === 'object'))\n    ? concatMerge(acc, src, options) // selectors\n    : overwriteMerge(acc, src, options) // baseElements.selectors\n);\n\n/**\n * Preprocess options, compile selectors into a decision tree,\n * return a function intended for batch processing.\n *\n * @param   { Options } [options = {}]   HtmlToText options.\n * @returns { (html: string) => string } Pre-configured converter function.\n * @static\n */\nfunction compile (options = {}) {\n  options = merge(\n    DEFAULT_OPTIONS,\n    options,\n    {\n      arrayMerge: overwriteMerge,\n      customMerge: (key) => ((key === 'selectors') ? selectorsMerge : undefined)\n    }\n  );\n  options.formatters = Object.assign({}, defaultFormatters, options.formatters);\n\n  handleDeprecatedOptions(options);\n\n  const uniqueSelectors = mergeDuplicatesPreferLast(options.selectors, (s => s.selector));\n  const selectorsWithoutFormat = uniqueSelectors.filter(s => !s.format);\n  if (selectorsWithoutFormat.length) {\n    throw new Error(\n      'Following selectors have no specified format: ' +\n      selectorsWithoutFormat.map(s => `\\`${s.selector}\\``).join(', ')\n    );\n  }\n  const picker = new selderee.DecisionTree(\n    uniqueSelectors.map(s => [s.selector, s])\n  ).build(hp2Builder);\n\n  const baseSelectorsPicker = new selderee.DecisionTree(\n    options.baseElements.selectors.map((s, i) => [s, i + 1])\n  ).build(hp2Builder);\n  function findBaseElements (dom) {\n    return findBases(dom, options, baseSelectorsPicker);\n  }\n\n  const limitedWalk = limitedDepthRecursive(\n    options.limits.maxDepth,\n    recursiveWalk,\n    function (dom, builder) {\n      builder.addInline(options.limits.ellipsis || '');\n    }\n  );\n\n  return function (html) {\n    return process(html, options, picker, findBaseElements, limitedWalk);\n  };\n}\n\n/**\n * Convert given HTML according to preprocessed options.\n *\n * @param { string } html HTML content to convert.\n * @param { Options } options HtmlToText options (preprocessed).\n * @param { Picker<DomNode, TagDefinition> } picker\n * Tag definition picker for DOM nodes processing.\n * @param { (dom: DomNode[]) => DomNode[] } findBaseElements\n * Function to extract elements from HTML DOM\n * that will only be present in the output text.\n * @param { RecursiveCallback } walk Recursive callback.\n * @returns { string }\n */\nfunction process (html, options, picker, findBaseElements, walk) {\n  const maxInputLength = options.limits.maxInputLength;\n  if (maxInputLength && html && html.length > maxInputLength) {\n    console.warn(\n      `Input length ${html.length} is above allowed limit of ${maxInputLength}. Truncating without ellipsis.`\n    );\n    html = html.substring(0, maxInputLength);\n  }\n\n  const handler = new htmlparser.DomHandler();\n  new htmlparser.Parser(handler, { decodeEntities: false }).parseComplete(html);\n\n  const bases = findBaseElements(handler.dom);\n  const builder = new BlockTextBuilder(options, picker);\n  walk(bases, builder);\n  return builder.toString();\n}\n\n/**\n * Convert given HTML content to plain text string.\n *\n * @param   { string }  html           HTML content to convert.\n * @param   { Options } [options = {}] HtmlToText options.\n * @returns { string }                 Plain text string.\n * @static\n *\n * @example\n * const { convert } = require('html-to-text');\n * const text = convert('<h1>Hello World</h1>', {\n *   wordwrap: 130\n * });\n * console.log(text); // HELLO WORLD\n */\nfunction convert (html, options = {}) {\n  return compile(options)(html);\n}\n\n/**\n * Map previously existing and now deprecated options to the new options layout.\n * This is a subject for cleanup in major releases.\n *\n * @param { Options } options HtmlToText options.\n */\nfunction handleDeprecatedOptions (options) {\n  const selectorDefinitions = options.selectors;\n\n  if (options.tags) {\n    const tagDefinitions = Object.entries(options.tags).map(\n      ([selector, definition]) => ({ ...definition, selector: selector || '*' })\n    );\n    selectorDefinitions.push(...tagDefinitions);\n  }\n\n  function set (obj, path, value) {\n    const valueKey = path.pop();\n    for (const key of path) {\n      let nested = obj[key];\n      if (!nested) {\n        nested = {};\n        obj[key] = nested;\n      }\n      obj = nested;\n    }\n    obj[valueKey] = value;\n  }\n\n  function copyFormatterOption (source, format, target) {\n    if (options[source] === undefined) { return; }\n    for (const definition of selectorDefinitions) {\n      if (definition.format === format) {\n        set(definition, ['options', target], options[source]);\n      }\n    }\n  }\n\n  copyFormatterOption('hideLinkHrefIfSameAsText', 'anchor', 'hideLinkHrefIfSameAsText');\n  copyFormatterOption('ignoreHref', 'anchor', 'ignoreHref');\n  copyFormatterOption('linkHrefBaseUrl', 'anchor', 'baseUrl');\n  copyFormatterOption('noAnchorUrl', 'anchor', 'noAnchorUrl');\n  copyFormatterOption('noLinkBrackets', 'anchor', 'noLinkBrackets');\n\n  copyFormatterOption('linkHrefBaseUrl', 'image', 'baseUrl');\n\n  copyFormatterOption('unorderedListItemPrefix', 'unorderedList', 'itemPrefix');\n\n  copyFormatterOption('uppercaseHeadings', 'heading', 'uppercase');\n  copyFormatterOption('uppercaseHeadings', 'table', 'uppercaseHeadings');\n  copyFormatterOption('uppercaseHeadings', 'dataTable', 'uppercaseHeadings');\n\n  if (options['ignoreImage']) {\n    for (const definition of selectorDefinitions) {\n      if (definition.format === 'image') {\n        definition.format = 'skip';\n      }\n    }\n  }\n\n  if (options['singleNewLineParagraphs']) {\n    for (const definition of selectorDefinitions) {\n      if (definition.format === 'paragraph' || definition.format === 'pre') {\n        set(definition, ['options', 'leadingLineBreaks'], 1);\n        set(definition, ['options', 'trailingLineBreaks'], 1);\n      }\n    }\n  }\n\n  if (options['baseElement']) {\n    const baseElement = options['baseElement'];\n    set(\n      options,\n      ['baseElements', 'selectors'],\n      (Array.isArray(baseElement) ? baseElement : [baseElement])\n    );\n  }\n  if (options['returnDomByDefault'] !== undefined) {\n    set(options, ['baseElements', 'returnDomByDefault'], options['returnDomByDefault']);\n  }\n\n  for (const definition of selectorDefinitions) {\n    if (definition.format === 'anchor' && get(definition, ['options', 'noLinkBrackets'])) {\n      set(definition, ['options', 'linkBrackets'], false);\n    }\n  }\n}\n\nfunction findBases (dom, options, baseSelectorsPicker) {\n  const results = [];\n\n  function recursiveWalk (walk, /** @type { DomNode[] } */ dom) {\n    dom = dom.slice(0, options.limits.maxChildNodes);\n    for (const elem of dom) {\n      if (elem.type !== 'tag') {\n        continue;\n      }\n      const pickedSelectorIndex = baseSelectorsPicker.pick1(elem);\n      if (pickedSelectorIndex > 0) {\n        results.push({ selectorIndex: pickedSelectorIndex, element: elem });\n      } else if (elem.children) {\n        walk(elem.children);\n      }\n      if (results.length >= options.limits.maxBaseElements) {\n        return;\n      }\n    }\n  }\n\n  const limitedWalk = limitedDepthRecursive(\n    options.limits.maxDepth,\n    recursiveWalk\n  );\n  limitedWalk(dom);\n\n  if (options.baseElements.orderBy !== 'occurrence') { // 'selectors'\n    results.sort((a, b) => a.selectorIndex - b.selectorIndex);\n  }\n  return (options.baseElements.returnDomByDefault && results.length === 0)\n    ? dom\n    : results.map(x => x.element);\n}\n\n/**\n * Function to walk through DOM nodes and accumulate their string representations.\n *\n * @param   { RecursiveCallback } walk    Recursive callback.\n * @param   { DomNode[] }         [dom]   Nodes array to process.\n * @param   { BlockTextBuilder }  builder Passed around to accumulate output text.\n * @private\n */\nfunction recursiveWalk (walk, dom, builder) {\n  if (!dom) { return; }\n\n  const options = builder.options;\n\n  const tooManyChildNodes = dom.length > options.limits.maxChildNodes;\n  if (tooManyChildNodes) {\n    dom = dom.slice(0, options.limits.maxChildNodes);\n    dom.push({\n      data: options.limits.ellipsis,\n      type: 'text'\n    });\n  }\n\n  for (const elem of dom) {\n    switch (elem.type) {\n      case 'text': {\n        builder.addInline(he.decode(elem.data, options.decodeOptions));\n        break;\n      }\n      case 'tag': {\n        const tagDefinition = builder.picker.pick1(elem);\n        const format = options.formatters[tagDefinition.format];\n        format(elem, walk, builder, tagDefinition.options || {});\n        break;\n      }\n      default:\n        /* do nothing */\n        break;\n    }\n  }\n\n  return;\n}\n\n/**\n * @deprecated Use `{ convert }` function instead!\n * @see convert\n *\n * @param   { string }  html           HTML content to convert.\n * @param   { Options } [options = {}] HtmlToText options.\n * @returns { string }                 Plain text string.\n * @static\n */\nconst fromString = (html, options = {}) => convert(html, options);\n\nmodule.exports = {\n  compile: compile,\n  convert: convert,\n  fromString: fromString,\n  htmlToText: convert\n};\n"]},"metadata":{},"sourceType":"script"}